/* This code is generated by pOt. */

#include <pOtRTL.h>
#include "Strings.h"
#include "Reals.h"
#include "COCT.h"
#include "COCQ.h"

#include "hi.COCN"




static struct {void *next, *vars[0x1];} pOt__gc_ptrs = {pOt_NIL,{
  pOt_NIL
}};
static struct {void *next, *vars[0x1];} pOt__gc_strs = {&pOt__gc_ptrs,{
  pOt_NIL
}};




extern void pOt_CObjBaseName_COCN
#if pOt__ANSI_C
  (struct pOt__tag_3_COCT *pOt_x, pOt_INTEGER pOt_pos, pOt_INTEGER *pOt_nextpos)
#else
  (pOt_x, pOt_pos, pOt_nextpos)
  struct pOt__tag_3_COCT *pOt_x;
  pOt_INTEGER pOt_pos, *pOt_nextpos;

#endif
{
  pOt_Object_COCT pOt_head;
  struct {void *next, *vars[0x2];} pOt__gc_ptrs;
  struct {void *next, *vars[0x1];} pOt__gc_strs;
  pOt__gc_ptrs.next = pOt__gc_root;
  pOt__gc_strs.next = &pOt__gc_ptrs;
  pOt__gc_ptrs.vars[0x1]=pOt_NIL;
  pOt__gc_strs.vars[0x0]=pOt_NIL;
  pOt__gc_ptrs.vars[0x0]=&pOt_head;
  pOt__gc_root=(struct pOt__tag_gc_node*)&pOt__gc_strs;
  pOt_head=pOt_NIL;

  (*pOt_nextpos)=(pOt_INTEGER)(pOt_pos);
  if(( (*pOt_x).pOt_obj==pOt_NIL)) {
    goto pOt__Epilogue;
  }
  if(( (*pOt_x).pOt_mode==17)) {
    pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,(*pOt_x).pOt_obj))).pOt_name),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
  } else {
    pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x0L],&pOt__str_td[0x4]))),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
    pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,(*pOt_x).pOt_obj))).pOt_name),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
    if(( (*pOt_x).pOt_mode!=12)) {
      if(( (*pOt_x).pOt_mnolev<((pOt_INTEGER)(0)))) {
        pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0xCL],&pOt__str_td[0x1]))),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
        pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_GlbMod_COCT.arr[pOt__inxchk(__FILE__,__LINE__,0x40, (pOt_INTEGER)pOt__subchk(__FILE__,__LINE__,(pOt_LONGINT)(-(*pOt_x).pOt_mnolev),(pOt_LONGINT)(1),5))]))).pOt_name),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
      } else if(( (*pOt_x).pOt_mnolev==((pOt_INTEGER)(0)))) {
        switch((*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,(*pOt_x).pOt_obj))).pOt_mnolev) {
        case 0:
          pOt_head=(struct pOt__tag_1_COCT*)(pOt_topScope_COCT);
          for(;;) {
            if(( (*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_head))).pOt_mnolev!=((pOt_INTEGER)(0)))); else break;
            pOt_head=(struct pOt__tag_1_COCT*)((*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_head))).pOt_dsc);
          }
          pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0xCL],&pOt__str_td[0x1]))),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
          pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_head))).pOt_name),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
        break;
        case 1:
        break;
        case 2:
          pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x14L],&pOt__str_td[0x7]))),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
        break;
        default:;
          pOt__halt(__FILE__,__LINE__,0x10);
        }
      } else {
        if(((((*pOt_x).pOt_mode>=8))||(((*pOt_x).pOt_mnolev<pOt_level_COCT)))) {
          pOt_head=(struct pOt__tag_1_COCT*)(pOt_topScope_COCT);
          for(;;) {
            if(( (*pOt_x).pOt_mnolev!=(*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_head))).pOt_mnolev)); else break;
            pOt_head=(struct pOt__tag_1_COCT*)((*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_head))).pOt_dsc);
          }
          for(;;) {
            pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0xCL],&pOt__str_td[0x1]))),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
            pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_head))).pOt_name),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
            if(( (*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_head))).pOt_mnolev==((pOt_INTEGER)(0)))) {
              goto pOt__LoopLabel_1;
            }
            pOt_head=(struct pOt__tag_1_COCT*)((*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_head))).pOt_dsc);
          }
        pOt__LoopLabel_1:;
        } else if(( (*pOt_x).pOt_mnolev>pOt_level_COCT)) {
          pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0xCL],&pOt__str_td[0x1]))),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
        }
      }
    }
  }

pOt__Epilogue:;
  pOt__gc_root=(struct pOt__tag_gc_node*)pOt__gc_ptrs.next;
}




extern void pOt_CObjName_COCN
#if pOt__ANSI_C
  (struct pOt__tag_3_COCT *pOt_x, pOt_INTEGER pOt_pos, pOt_INTEGER *pOt_nextpos)
#else
  (pOt_x, pOt_pos, pOt_nextpos)
  struct pOt__tag_3_COCT *pOt_x;
  pOt_INTEGER pOt_pos, *pOt_nextpos;

#endif
{
  pOt_BOOLEAN pOt_viaref;
  struct {void*next;} pOt__gc_ptrs;
  pOt__gc_ptrs.next = pOt__gc_root;

  (*pOt_nextpos)=(pOt_INTEGER)(pOt_pos);
  pOt_viaref=(((((*pOt_x).pOt_mode==1))&&(((*pOt_x).pOt_mnolev>((pOt_INTEGER)(0)))))&&(((*pOt_x).pOt_mnolev!=pOt_level_COCT)));
  if(pOt_viaref) {
    pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x20L],&pOt__str_td[0x2]))),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
  }
  pOt_CObjBaseName_COCN((struct pOt__tag_3_COCT*)&(*pOt_x),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
  if(pOt_viaref) {
    pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x28L],&pOt__str_td[0x1]))),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
  }

pOt__Epilogue:;
  pOt__gc_root=(struct pOt__tag_gc_node*)pOt__gc_ptrs.next;
}




extern void pOt_CRetName_COCN
#if pOt__ANSI_C
  (pOt_INTEGER pOt_pos, pOt_INTEGER *pOt_nextpos)
#else
  (pOt_pos, pOt_nextpos)
  pOt_INTEGER pOt_pos, *pOt_nextpos;

#endif
{
  struct {void*next;} pOt__gc_ptrs;
  pOt__gc_ptrs.next = pOt__gc_root;

  pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x30L],&pOt__str_td[0xB]))),(pOt_INTEGER)(pOt_pos),&(*pOt_nextpos));

pOt__Epilogue:;
  pOt__gc_root=(struct pOt__tag_gc_node*)pOt__gc_ptrs.next;
}


struct pOt__tag_0_COCN {
  pOt__ArrTypDsc *td;
  pOt_CHAR arr[0x5L];
} ;
static pOt__ArrTypDsc pOt__td_0_COCN= {
  1,
  0x5L, sizeof(pOt_CHAR)
};


extern void pOt_CTDName_COCN
#if pOt__ANSI_C
  (pOt_Struct_COCT pOt_typ, pOt_INTEGER pOt_pos, pOt_INTEGER *pOt_nextpos)
#else
  (pOt_typ, pOt_pos, pOt_nextpos)
  pOt_Struct_COCT pOt_typ;
  pOt_INTEGER pOt_pos, *pOt_nextpos;

#endif
{
  pOt_Object_COCT pOt_head;
  struct pOt__tag_0_COCN pOt_s;
  struct {void *next, *vars[0x3];} pOt__gc_ptrs;
  struct {void *next, *vars[0x1];} pOt__gc_strs;
  pOt__gc_ptrs.next = pOt__gc_root;
  pOt__gc_strs.next = &pOt__gc_ptrs;
  pOt__gc_ptrs.vars[0x2]=pOt_NIL;
  pOt__gc_strs.vars[0x0]=pOt_NIL;
  pOt__gc_ptrs.vars[0x1]=&pOt_typ;
  pOt__gc_ptrs.vars[0x0]=&pOt_head;
  pOt__gc_root=(struct pOt__tag_gc_node*)&pOt__gc_strs;
  pOt_head=pOt_NIL;
  pOt__init_var((pOt__TypDsc**)&pOt_s,(pOt__TypDsc*)&pOt__td_0_COCN);

  (*pOt_nextpos)=(pOt_INTEGER)(pOt_pos);
  pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x40L],&pOt__str_td[0x8]))),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
  pOt_FromLInt_Strings((pOt_LONGINT)((*((struct pOt__tag_2_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_typ))).pOt_descr),16,(pOt__ArrTypDsc**)&pOt_s);
  pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&pOt_s),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
  pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0xCL],&pOt__str_td[0x1]))),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
  if(( (*((struct pOt__tag_2_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_typ))).pOt_mno==((pOt_INTEGER)(0)))) {
    pOt_head=(struct pOt__tag_1_COCT*)(pOt_topScope_COCT);
    for(;;) {
      if(( (*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_head))).pOt_mnolev!=((pOt_INTEGER)(0)))); else break;
      pOt_head=(struct pOt__tag_1_COCT*)((*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_head))).pOt_dsc);
    }
    pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_head))).pOt_name),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
  } else {
    pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_GlbMod_COCT.arr[pOt__inxchk(__FILE__,__LINE__,0x40, (pOt_INTEGER)pOt__subchk(__FILE__,__LINE__,(pOt_LONGINT)((*((struct pOt__tag_2_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_typ))).pOt_mno),(pOt_LONGINT)(1),5))]))).pOt_name),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
  }

pOt__Epilogue:;
  pOt__gc_root=(struct pOt__tag_gc_node*)pOt__gc_ptrs.next;
}


struct pOt__tag_1_COCN {
  pOt__ArrTypDsc *td;
  pOt_CHAR arr[0x5L];
} ;
static pOt__ArrTypDsc pOt__td_1_COCN= {
  1,
  0x5L, sizeof(pOt_CHAR)
};


extern void pOt_CTagName_COCN
#if pOt__ANSI_C
  (pOt_Struct_COCT pOt_typ, pOt_INTEGER pOt_pos, pOt_INTEGER *pOt_nextpos)
#else
  (pOt_typ, pOt_pos, pOt_nextpos)
  pOt_Struct_COCT pOt_typ;
  pOt_INTEGER pOt_pos, *pOt_nextpos;

#endif
{
  pOt_Object_COCT pOt_head;
  struct pOt__tag_1_COCN pOt_s;
  struct {void *next, *vars[0x3];} pOt__gc_ptrs;
  struct {void *next, *vars[0x1];} pOt__gc_strs;
  pOt__gc_ptrs.next = pOt__gc_root;
  pOt__gc_strs.next = &pOt__gc_ptrs;
  pOt__gc_ptrs.vars[0x2]=pOt_NIL;
  pOt__gc_strs.vars[0x0]=pOt_NIL;
  pOt__gc_ptrs.vars[0x1]=&pOt_typ;
  pOt__gc_ptrs.vars[0x0]=&pOt_head;
  pOt__gc_root=(struct pOt__tag_gc_node*)&pOt__gc_strs;
  pOt_head=pOt_NIL;
  pOt__init_var((pOt__TypDsc**)&pOt_s,(pOt__TypDsc*)&pOt__td_1_COCN);

  (*pOt_nextpos)=(pOt_INTEGER)(pOt_pos);
  pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x50L],&pOt__str_td[0x10]))),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
  pOt_FromLInt_Strings((pOt_LONGINT)((*((struct pOt__tag_2_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_typ))).pOt_descr),16,(pOt__ArrTypDsc**)&pOt_s);
  pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&pOt_s),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
  pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0xCL],&pOt__str_td[0x1]))),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
  if(( (*((struct pOt__tag_2_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_typ))).pOt_mno==((pOt_INTEGER)(0)))) {
    pOt_head=(struct pOt__tag_1_COCT*)(pOt_topScope_COCT);
    for(;;) {
      if(( (*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_head))).pOt_mnolev!=((pOt_INTEGER)(0)))); else break;
      pOt_head=(struct pOt__tag_1_COCT*)((*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_head))).pOt_dsc);
    }
    pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_head))).pOt_name),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
  } else {
    pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_GlbMod_COCT.arr[pOt__inxchk(__FILE__,__LINE__,0x40, (pOt_INTEGER)pOt__subchk(__FILE__,__LINE__,(pOt_LONGINT)((*((struct pOt__tag_2_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_typ))).pOt_mno),(pOt_LONGINT)(1),5))]))).pOt_name),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
  }

pOt__Epilogue:;
  pOt__gc_root=(struct pOt__tag_gc_node*)pOt__gc_ptrs.next;
}




extern void pOt_CTDenoter_COCN
#if pOt__ANSI_C
  (pOt_Struct_COCT pOt_typ, pOt_INTEGER pOt_pos, pOt_INTEGER *pOt_nextpos)
#else
  (pOt_typ, pOt_pos, pOt_nextpos)
  pOt_Struct_COCT pOt_typ;
  pOt_INTEGER pOt_pos, *pOt_nextpos;

#endif
{
  struct pOt__tag_3_COCT pOt_y;
  struct {void *next, *vars[0x2];} pOt__gc_ptrs;
  struct {void *next, *vars[0x2];} pOt__gc_strs;
  pOt__gc_ptrs.next = pOt__gc_root;
  pOt__gc_strs.next = &pOt__gc_ptrs;
  pOt__gc_ptrs.vars[0x1]=pOt_NIL;
  pOt__gc_strs.vars[0x1]=pOt_NIL;
  pOt__gc_ptrs.vars[0x0]=&pOt_typ;
  pOt__gc_strs.vars[0x0]=&pOt_y;
  pOt__gc_root=(struct pOt__tag_gc_node*)&pOt__gc_strs;
  pOt__init_var((pOt__TypDsc**)&pOt_y,(pOt__TypDsc*)&pOt__td_3_COCT);

  (*pOt_nextpos)=(pOt_INTEGER)(pOt_pos);
  switch((*((struct pOt__tag_2_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_typ))).pOt_form) {
  case 0:
  break;
  case 2:
  case 3:
  case 4:
  case 5:
  case 6:
  case 7:
  case 8:
  case 9:
    pOt_y.pOt_mode=13;
    pOt_y.pOt_typ=(struct pOt__tag_2_COCT*)(pOt_typ);
    pOt_y.pOt_obj=(struct pOt__tag_1_COCT*)((*((struct pOt__tag_2_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_typ))).pOt_strobj);
    if(( (*((struct pOt__tag_2_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_typ))).pOt_mno>((pOt_INTEGER)(0)))) {
      pOt_y.pOt_mnolev=(pOt_INTEGER)(-(*((struct pOt__tag_2_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_typ))).pOt_mno);
    } else {
      pOt_FindObj_COCT((struct pOt__tag_1_COCT*)(pOt_y.pOt_obj),&pOt_y.pOt_mnolev);
    }
    pOt_CObjName_COCN((struct pOt__tag_3_COCT*)&pOt_y,(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
  break;
  case 10:
  case 11:
  break;
  case 12:
    pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x68L],&pOt__str_td[0x4]))),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
  break;
  case 13:
    pOt_CTDenoter_COCN((struct pOt__tag_2_COCT*)((*((struct pOt__tag_2_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_typ))).pOt_BaseTyp),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
    pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x74L],&pOt__str_td[0x1]))),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
  break;
  case 14:
    pOt_CTDenoter_COCN((struct pOt__tag_2_COCT*)((*((struct pOt__tag_2_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_typ))).pOt_BaseTyp),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
    pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x7CL],&pOt__str_td[0x5]))),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
  break;
  case 16:
    pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x88L],&pOt__str_td[0x10]))),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
  break;
  case 15:
  case 17:
    pOt_CTagName_COCN((struct pOt__tag_2_COCT*)(pOt_typ),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
  break;
  default:;
    pOt__halt(__FILE__,__LINE__,0x10);
  }

pOt__Epilogue:;
  pOt__gc_root=(struct pOt__tag_gc_node*)pOt__gc_ptrs.next;
}




extern void pOt_CTSize_COCN
#if pOt__ANSI_C
  (pOt_Struct_COCT pOt_typ, pOt_INTEGER pOt_pos, pOt_INTEGER *pOt_nextpos)
#else
  (pOt_typ, pOt_pos, pOt_nextpos)
  pOt_Struct_COCT pOt_typ;
  pOt_INTEGER pOt_pos, *pOt_nextpos;

#endif
{
  struct pOt__tag_3_COCT pOt_y;
  struct {void *next, *vars[0x2];} pOt__gc_ptrs;
  struct {void *next, *vars[0x2];} pOt__gc_strs;
  pOt__gc_ptrs.next = pOt__gc_root;
  pOt__gc_strs.next = &pOt__gc_ptrs;
  pOt__gc_ptrs.vars[0x1]=pOt_NIL;
  pOt__gc_strs.vars[0x1]=pOt_NIL;
  pOt__gc_ptrs.vars[0x0]=&pOt_typ;
  pOt__gc_strs.vars[0x0]=&pOt_y;
  pOt__gc_root=(struct pOt__tag_gc_node*)&pOt__gc_strs;
  pOt__init_var((pOt__TypDsc**)&pOt_y,(pOt__TypDsc*)&pOt__td_3_COCT);

  pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0xA0L],&pOt__str_td[0x7]))),(pOt_INTEGER)(pOt_pos),&(*pOt_nextpos));
  pOt_CTDenoter_COCN((struct pOt__tag_2_COCT*)(pOt_typ),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
  pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x28L],&pOt__str_td[0x1]))),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));

pOt__Epilogue:;
  pOt__gc_root=(struct pOt__tag_gc_node*)pOt__gc_ptrs.next;
}




extern void pOt_CBodyName_COCN
#if pOt__ANSI_C
  (pOt_Object_COCT pOt_obj, pOt_INTEGER pOt_pos, pOt_INTEGER *pOt_nextpos)
#else
  (pOt_obj, pOt_pos, pOt_nextpos)
  pOt_Object_COCT pOt_obj;
  pOt_INTEGER pOt_pos, *pOt_nextpos;

#endif
{
  struct {void *next, *vars[0x2];} pOt__gc_ptrs;
  struct {void *next, *vars[0x1];} pOt__gc_strs;
  pOt__gc_ptrs.next = pOt__gc_root;
  pOt__gc_strs.next = &pOt__gc_ptrs;
  pOt__gc_ptrs.vars[0x1]=pOt_NIL;
  pOt__gc_strs.vars[0x0]=pOt_NIL;
  pOt__gc_ptrs.vars[0x0]=&pOt_obj;
  pOt__gc_root=(struct pOt__tag_gc_node*)&pOt__gc_strs;

  pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x0L],&pOt__str_td[0x4]))),(pOt_INTEGER)(pOt_pos),&(*pOt_nextpos));
  if(( (*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_obj))).pOt_mnolev==((pOt_INTEGER)(0)))) {
    pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_obj))).pOt_name),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
  } else {
    pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_GlbMod_COCT.arr[pOt__inxchk(__FILE__,__LINE__,0x40, (pOt_INTEGER)pOt__subchk(__FILE__,__LINE__,(pOt_LONGINT)((*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_obj))).pOt_mnolev),(pOt_LONGINT)(1),5))]))).pOt_name),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
  }
  pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0xACL],&pOt__str_td[0x6]))),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));

pOt__Epilogue:;
  pOt__gc_root=(struct pOt__tag_gc_node*)pOt__gc_ptrs.next;
}




extern void pOt_CBodyFlagName_COCN
#if pOt__ANSI_C
  (pOt_Object_COCT pOt_obj, pOt_INTEGER pOt_pos, pOt_INTEGER *pOt_nextpos)
#else
  (pOt_obj, pOt_pos, pOt_nextpos)
  pOt_Object_COCT pOt_obj;
  pOt_INTEGER pOt_pos, *pOt_nextpos;

#endif
{
  struct {void *next, *vars[0x2];} pOt__gc_ptrs;
  struct {void *next, *vars[0x1];} pOt__gc_strs;
  pOt__gc_ptrs.next = pOt__gc_root;
  pOt__gc_strs.next = &pOt__gc_ptrs;
  pOt__gc_ptrs.vars[0x1]=pOt_NIL;
  pOt__gc_strs.vars[0x0]=pOt_NIL;
  pOt__gc_ptrs.vars[0x0]=&pOt_obj;
  pOt__gc_root=(struct pOt__tag_gc_node*)&pOt__gc_strs;

  pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x0L],&pOt__str_td[0x4]))),(pOt_INTEGER)(pOt_pos),&(*pOt_nextpos));
  if(( (*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_obj))).pOt_mnolev==((pOt_INTEGER)(0)))) {
    pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_obj))).pOt_name),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
  } else {
    pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_GlbMod_COCT.arr[pOt__inxchk(__FILE__,__LINE__,0x40, (pOt_INTEGER)pOt__subchk(__FILE__,__LINE__,(pOt_LONGINT)((*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_obj))).pOt_mnolev),(pOt_LONGINT)(1),5))]))).pOt_name),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));
  }
  pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0xB8L],&pOt__str_td[0x8]))),(pOt_INTEGER)((*pOt_nextpos)),&(*pOt_nextpos));

pOt__Epilogue:;
  pOt__gc_root=(struct pOt__tag_gc_node*)pOt__gc_ptrs.next;
}

void pOt_COCN__body()
{
  static int pOt_COCN__loaded=0;
  if(!pOt_COCN__loaded){
    pOt_COCN__loaded=1;

    pOt_Strings__body();
    pOt_Reals__body();
    pOt_COCT__body();
    pOt_COCQ__body();

    pOt__gc_ptrs.next=pOt__gc_root;
    pOt__gc_root=(struct pOt__tag_gc_node*)&pOt__gc_strs;



  pOt__Epilogue:;
  }
}
