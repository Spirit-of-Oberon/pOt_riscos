/* This code is generated by pOt. */

#include <pOtRTL.h>

#include "hi.CLib"

typedef struct pOt__tag_1_CLib pOt_SwiRegs_CLib;

struct pOt__tag_0_CLib {
  pOt__ArrTypDsc *td;
  pOt_LONGINT arr[0xAL];
} ;
pOt__ArrTypDsc pOt__td_0_CLib= {
  1,
  0xAL, sizeof(pOt_LONGINT)
};
struct pOt__tag_1_CLib {
  pOt__RecTypDsc *td;
  struct pOt__tag_0_CLib pOt_r;
} ;
struct {
  pOt_INTEGER mode;
  pOt_LONGINT size;
  pOt_INTEGER extlev, nstr, nptr, npro;
  pOt__RecTypDsc *base_td[pOt__MaxExts];
  struct {pOt_LONGINT poffs; pOt__TypDsc *fld_td;} tab[0x1];
} pOt__td_1_CLib= {
  0,
  sizeof(struct pOt__tag_1_CLib),
  0x0, 0x1, 0x0, 0x0,
  {pOt_NIL, pOt_NIL, pOt_NIL, pOt_NIL, pOt_NIL, pOt_NIL, pOt_NIL, pOt_NIL, pOt_NIL, pOt_NIL, pOt_NIL, pOt_NIL, pOt_NIL, pOt_NIL, pOt_NIL, pOt_NIL},
  {
    {(pOt_LONGINT)&((struct pOt__tag_1_CLib*)0)->pOt_r, (pOt__TypDsc*)&pOt__td_0_CLib}
  }
};


static struct {void *next, *vars[0x1];} pOt__gc_ptrs = {pOt_NIL,{
  pOt_NIL
}};
static struct {void *next, *vars[0x1];} pOt__gc_strs = {&pOt__gc_ptrs,{
  pOt_NIL
}};

pOt_LONGINT KernelSwi pOt__ARGS((pOt_LONGINT , pOt_LONGINT , pOt_LONGINT ));

void pOt_CLib__body()
{
  static int pOt_CLib__loaded=0;
  if(!pOt_CLib__loaded){
    pOt_CLib__loaded=1;


    pOt__gc_ptrs.next=pOt__gc_root;
    pOt__gc_root=(struct pOt__tag_gc_node*)&pOt__gc_strs;



  pOt__Epilogue:;
  }
}
