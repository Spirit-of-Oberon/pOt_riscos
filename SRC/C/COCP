/* This code is generated by pOt. */

#include <pOtRTL.h>
#include "Strings.h"
#include "COCT.h"
#include "COCQ.h"
#include "COCN.h"

#include "hi.COCP"




static struct {void *next, *vars[0x1];} pOt__gc_ptrs = {pOt_NIL,{
  pOt_NIL
}};
static struct {void *next, *vars[0x1];} pOt__gc_strs = {&pOt__gc_ptrs,{
  pOt_NIL
}};




extern void pOt_AssignPfx_COCP
#if pOt__ANSI_C
  (struct pOt__tag_3_COCT *pOt_x, pOt_BOOLEAN pOt_typchk)
#else
  (pOt_x, pOt_typchk)
  struct pOt__tag_3_COCT *pOt_x;
  pOt_BOOLEAN pOt_typchk;

#endif
{
  pOt_INTEGER pOt_np;
  struct {void*next;} pOt__gc_ptrs;
  pOt__gc_ptrs.next = pOt__gc_root;

  switch((*((struct pOt__tag_2_COCT*)pOt__nilchk(__FILE__,__LINE__,(*pOt_x).pOt_typ))).pOt_form) {
  case 0:
  break;
  case 1:
  case 2:
  case 3:
  case 4:
    pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x0L],&pOt__str_td[0x1]))));
  break;
  case 5:
  case 6:
  case 7:
  case 8:
  case 13:
    pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x8L],&pOt__str_td[0x2]))));
    pOt_CTDenoter_COCN((struct pOt__tag_2_COCT*)((*pOt_x).pOt_typ),(pOt_INTEGER)(pOt_cslen_COCQ),&pOt_np);
    pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x10L],&pOt__str_td[0x2]))));
  break;
  case 9:
  case 14:
    pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x0L],&pOt__str_td[0x1]))));
  break;
  case 10:
  case 11:
  case 12:
  break;
  case 15:
    pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x18L],&pOt__str_td[0x23]))),(pOt_INTEGER)((*pOt_x).pOt_qoffs),&pOt_np);
    pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x40L],&pOt__str_td[0x14]))));
  break;
  case 16:
  break;
  case 17:
    if((pOt_typchk&&(((((*pOt_x).pOt_obj==pOt_wasderef_COCT))||((((*pOt_x).pOt_obj!=pOt_NIL))&&(((*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,(*pOt_x).pOt_obj))).pOt_mode==3))))))) {
      pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x5CL],&pOt__str_td[0x38]))),(pOt_INTEGER)((*pOt_x).pOt_qoffs),&pOt_np);
      pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x9CL],&pOt__str_td[0x14]))));
    } else {
      pOt_Prepend_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0xB8L],&pOt__str_td[0x23]))),(pOt_INTEGER)((*pOt_x).pOt_qoffs),&pOt_np);
      pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x9CL],&pOt__str_td[0x14]))));
    }
  break;
  default:;
    pOt__halt(__FILE__,__LINE__,0x10);
  }

pOt__Epilogue:;
  pOt__gc_root=(struct pOt__tag_gc_node*)pOt__gc_ptrs.next;
}




extern void pOt_AssignSfx_COCP
#if pOt__ANSI_C
  (struct pOt__tag_3_COCT *pOt_x, struct pOt__tag_3_COCT *pOt_y)
#else
  (pOt_x, pOt_y)
  struct pOt__tag_3_COCT *pOt_x, *pOt_y;

#endif
{
  struct {void*next;} pOt__gc_ptrs;
  pOt__gc_ptrs.next = pOt__gc_root;

  switch((*((struct pOt__tag_2_COCT*)pOt__nilchk(__FILE__,__LINE__,(*pOt_x).pOt_typ))).pOt_form) {
  case 0:
  break;
  case 1:
  case 2:
  case 3:
  case 4:
  break;
  case 5:
  case 6:
  case 7:
  case 8:
  case 13:
    pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0xE0L],&pOt__str_td[0x1]))));
  break;
  case 9:
  case 14:
  break;
  case 10:
  case 11:
  case 12:
  break;
  case 15:
    pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0xE0L],&pOt__str_td[0x1]))));
  break;
  case 16:
  break;
  case 17:
    pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0xE0L],&pOt__str_td[0x1]))));
  break;
  default:;
    pOt__halt(__FILE__,__LINE__,0x10);
  }

pOt__Epilogue:;
  pOt__gc_root=(struct pOt__tag_gc_node*)pOt__gc_ptrs.next;
}




extern void pOt_ParamPfx_COCP
#if pOt__ANSI_C
  (pOt_Object_COCT pOt_f)
#else
  (pOt_f)
  pOt_Object_COCT pOt_f;

#endif
{
  pOt_INTEGER pOt_np;
  struct {void *next, *vars[0x2];} pOt__gc_ptrs;
  struct {void *next, *vars[0x1];} pOt__gc_strs;
  pOt__gc_ptrs.next = pOt__gc_root;
  pOt__gc_strs.next = &pOt__gc_ptrs;
  pOt__gc_ptrs.vars[0x1]=pOt_NIL;
  pOt__gc_strs.vars[0x0]=pOt_NIL;
  pOt__gc_ptrs.vars[0x0]=&pOt_f;
  pOt__gc_root=(struct pOt__tag_gc_node*)&pOt__gc_strs;

  if(( (*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_f))).pOt_mode==3)) {
    switch((*((struct pOt__tag_2_COCT*)pOt__nilchk(__FILE__,__LINE__,(*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_f))).pOt_typ))).pOt_form) {
    case 0:
    break;
    case 1:
      pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0xE8L],&pOt__str_td[0x13]))));
    break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x100L],&pOt__str_td[0x1]))));
    break;
    case 16:
      if(( (*((struct pOt__tag_2_COCT*)pOt__nilchk(__FILE__,__LINE__,(*((struct pOt__tag_2_COCT*)pOt__nilchk(__FILE__,__LINE__,(*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_f))).pOt_typ))).pOt_BaseTyp))).pOt_form==1)) {
        pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x108L],&pOt__str_td[0x1B]))));
      } else {
        pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x128L],&pOt__str_td[0x13]))));
      }
    break;
    case 17:
      pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x140L],&pOt__str_td[0x1]))));
      pOt_CTDenoter_COCN((struct pOt__tag_2_COCT*)((*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_f))).pOt_typ),(pOt_INTEGER)(pOt_cslen_COCQ),&pOt_np);
      pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x148L],&pOt__str_td[0x3]))));
    break;
    default:;
      pOt__halt(__FILE__,__LINE__,0x10);
    }
  } else {
    switch((*((struct pOt__tag_2_COCT*)pOt__nilchk(__FILE__,__LINE__,(*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_f))).pOt_typ))).pOt_form) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    break;
    case 5:
    case 6:
    case 7:
    case 8:
    case 13:
      pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x140L],&pOt__str_td[0x1]))));
      pOt_CTDenoter_COCN((struct pOt__tag_2_COCT*)((*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_f))).pOt_typ),(pOt_INTEGER)(pOt_cslen_COCQ),&pOt_np);
      pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x10L],&pOt__str_td[0x2]))));
    break;
    case 9:
    case 14:
    break;
    case 10:
    case 11:
    case 12:
    break;
    case 15:
      pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x140L],&pOt__str_td[0x1]))));
      pOt_CTDenoter_COCN((struct pOt__tag_2_COCT*)((*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_f))).pOt_typ),(pOt_INTEGER)(pOt_cslen_COCQ),&pOt_np);
      pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x150L],&pOt__str_td[0x2]))));
      pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x158L],&pOt__str_td[0x32]))));
    break;
    case 16:
      if(( (*((struct pOt__tag_2_COCT*)pOt__nilchk(__FILE__,__LINE__,(*((struct pOt__tag_2_COCT*)pOt__nilchk(__FILE__,__LINE__,(*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_f))).pOt_typ))).pOt_BaseTyp))).pOt_form==1)) {
        pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x190L],&pOt__str_td[0x2C]))));
      } else {
        pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x158L],&pOt__str_td[0x32]))));
      }
    break;
    case 17:
      pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x140L],&pOt__str_td[0x1]))));
      pOt_CTDenoter_COCN((struct pOt__tag_2_COCT*)((*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_f))).pOt_typ),(pOt_INTEGER)(pOt_cslen_COCQ),&pOt_np);
      pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x150L],&pOt__str_td[0x2]))));
      pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x1C4L],&pOt__str_td[0x32]))));
    break;
    default:;
      pOt__halt(__FILE__,__LINE__,0x10);
    }
  }

pOt__Epilogue:;
  pOt__gc_root=(struct pOt__tag_gc_node*)pOt__gc_ptrs.next;
}




extern void pOt_ParamSfx_COCP
#if pOt__ANSI_C
  (struct pOt__tag_3_COCT *pOt_ap, pOt_Object_COCT pOt_f)
#else
  (pOt_ap, pOt_f)
  struct pOt__tag_3_COCT *pOt_ap;
  pOt_Object_COCT pOt_f;

#endif
{
  pOt_INTEGER pOt_np;
  struct {void *next, *vars[0x2];} pOt__gc_ptrs;
  struct {void *next, *vars[0x1];} pOt__gc_strs;
  pOt__gc_ptrs.next = pOt__gc_root;
  pOt__gc_strs.next = &pOt__gc_ptrs;
  pOt__gc_ptrs.vars[0x1]=pOt_NIL;
  pOt__gc_strs.vars[0x0]=pOt_NIL;
  pOt__gc_ptrs.vars[0x0]=&pOt_f;
  pOt__gc_root=(struct pOt__tag_gc_node*)&pOt__gc_strs;

  if(( (*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_f))).pOt_mode==3)) {
    switch((*((struct pOt__tag_2_COCT*)pOt__nilchk(__FILE__,__LINE__,(*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_f))).pOt_typ))).pOt_form) {
    case 0:
    case 1:
    break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    break;
    case 16:
      if(( (*((struct pOt__tag_2_COCT*)pOt__nilchk(__FILE__,__LINE__,(*((struct pOt__tag_2_COCT*)pOt__nilchk(__FILE__,__LINE__,(*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_f))).pOt_typ))).pOt_BaseTyp))).pOt_form==1)) {
        pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x1FCL],&pOt__str_td[0x1]))));
        switch((*((struct pOt__tag_2_COCT*)pOt__nilchk(__FILE__,__LINE__,(*pOt_ap).pOt_typ))).pOt_form) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x204L],&pOt__str_td[0x2]))));
          pOt_CTSize_COCN((struct pOt__tag_2_COCT*)((*pOt_ap).pOt_typ),(pOt_INTEGER)(pOt_cslen_COCQ),&pOt_np);
          pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0xE0L],&pOt__str_td[0x1]))));
        break;
        case 15:
        case 16:
          if((((((*((struct pOt__tag_2_COCT*)pOt__nilchk(__FILE__,__LINE__,(*pOt_ap).pOt_typ))).pOt_form==16))&&(((*pOt_ap).pOt_intval==((pOt_LONGINT)(0)))))&&(((*((struct pOt__tag_2_COCT*)pOt__nilchk(__FILE__,__LINE__,(*((struct pOt__tag_2_COCT*)pOt__nilchk(__FILE__,__LINE__,(*pOt_ap).pOt_typ))).pOt_BaseTyp))).pOt_form==1)))) {
            pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x20CL],&pOt__str_td[0x4]))));
          } else if(((unsigned long)0!=((unsigned long)1<<pOt__rngchk_se(__FILE__,__LINE__, (*((struct pOt__tag_2_COCT*)pOt__nilchk(__FILE__,__LINE__,(*((struct pOt__tag_2_COCT*)pOt__nilchk(__FILE__,__LINE__,(*pOt_ap).pOt_typ))).pOt_BaseTyp))).pOt_form)&(pOt_SET)0x1EL))) {
            pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x218L],&pOt__str_td[0x4]))));
          } else {
            pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x224L],&pOt__str_td[0x4]))));
          }
        break;
        case 17:
          pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x230L],&pOt__str_td[0x4]))));
        break;
        default:;
          pOt__halt(__FILE__,__LINE__,0x10);
        }
      }
    break;
    case 17:
    break;
    default:;
      pOt__halt(__FILE__,__LINE__,0x10);
    }
  } else {
    switch((*((struct pOt__tag_2_COCT*)pOt__nilchk(__FILE__,__LINE__,(*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_f))).pOt_typ))).pOt_form) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    break;
    case 5:
    case 6:
    case 7:
    case 8:
    case 13:
      pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0xE0L],&pOt__str_td[0x1]))));
    break;
    case 9:
    case 14:
    break;
    case 10:
    case 11:
    case 12:
    break;
    case 15:
      pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0xE0L],&pOt__str_td[0x1]))));
    break;
    case 16:
      if(( (*((struct pOt__tag_2_COCT*)pOt__nilchk(__FILE__,__LINE__,(*((struct pOt__tag_2_COCT*)pOt__nilchk(__FILE__,__LINE__,(*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_f))).pOt_typ))).pOt_BaseTyp))).pOt_form==1)) {
        if(((((*((struct pOt__tag_2_COCT*)pOt__nilchk(__FILE__,__LINE__,(*pOt_ap).pOt_typ))).pOt_form==16))&&(((*pOt_ap).pOt_intval==((pOt_LONGINT)(0)))))) {
          pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x23CL],&pOt__str_td[0x3]))));
        } else {
          pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x244L],&pOt__str_td[0x3]))));
        }
      } else {
        pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0xE0L],&pOt__str_td[0x1]))));
      }
    break;
    case 17:
      pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x24CL],&pOt__str_td[0x13]))));
      pOt_CTDName_COCN((struct pOt__tag_2_COCT*)((*((struct pOt__tag_1_COCT*)pOt__nilchk(__FILE__,__LINE__,pOt_f))).pOt_typ),(pOt_INTEGER)(pOt_cslen_COCQ),&pOt_np);
      pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0xE0L],&pOt__str_td[0x1]))));
    break;
    default:;
      pOt__halt(__FILE__,__LINE__,0x10);
    }
  }

pOt__Epilogue:;
  pOt__gc_root=(struct pOt__tag_gc_node*)pOt__gc_ptrs.next;
}




extern void pOt_ParamListPfx_COCP()
{
  struct {void*next;} pOt__gc_ptrs;
  pOt__gc_ptrs.next = pOt__gc_root;

  pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x140L],&pOt__str_td[0x1]))));

pOt__Epilogue:;
  pOt__gc_root=(struct pOt__tag_gc_node*)pOt__gc_ptrs.next;
}




extern void pOt_NextParam_COCP()
{
  struct {void*next;} pOt__gc_ptrs;
  pOt__gc_ptrs.next = pOt__gc_root;

  pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x1FCL],&pOt__str_td[0x1]))));

pOt__Epilogue:;
  pOt__gc_root=(struct pOt__tag_gc_node*)pOt__gc_ptrs.next;
}




extern void pOt_ParamListSfx_COCP()
{
  struct {void*next;} pOt__gc_ptrs;
  pOt__gc_ptrs.next = pOt__gc_root;

  pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0xE0L],&pOt__str_td[0x1]))));

pOt__Epilogue:;
  pOt__gc_root=(struct pOt__tag_gc_node*)pOt__gc_ptrs.next;
}


struct pOt__tag_0_COCP {
  pOt__ArrTypDsc *td;
  pOt_CHAR arr[0x9L];
} ;
static pOt__ArrTypDsc pOt__td_0_COCP= {
  1,
  0x9L, sizeof(pOt_CHAR)
};


extern void pOt_Trap_COCP
#if pOt__ANSI_C
  (struct pOt__tag_3_COCT *pOt_x)
#else
  (pOt_x)
  struct pOt__tag_3_COCT *pOt_x;

#endif
{
  struct pOt__tag_0_COCP pOt_s;
  struct {void*next;} pOt__gc_ptrs;
  pOt__gc_ptrs.next = pOt__gc_root;
  pOt__init_var((pOt__TypDsc**)&pOt_s,(pOt__TypDsc*)&pOt__td_0_COCP);

  pOt_FromLInt_Strings((pOt_LONGINT)((*pOt_x).pOt_intval),16,(pOt__ArrTypDsc**)&pOt_s);
  pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0x264L],&pOt__str_td[0x1E]))));
  pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&pOt_s));
  pOt_Append_COCQ(pOt__dup_arr(__FILE__,__LINE__,(pOt__ArrTypDsc**)&(*pOt__set_str_td(&pOt__strcon_buf[0xE0L],&pOt__str_td[0x1]))));

pOt__Epilogue:;
  pOt__gc_root=(struct pOt__tag_gc_node*)pOt__gc_ptrs.next;
}

void pOt_COCP__body()
{
  static int pOt_COCP__loaded=0;
  if(!pOt_COCP__loaded){
    pOt_COCP__loaded=1;

    pOt_Strings__body();
    pOt_COCT__body();
    pOt_COCQ__body();
    pOt_COCN__body();

    pOt__gc_ptrs.next=pOt__gc_root;
    pOt__gc_root=(struct pOt__tag_gc_node*)&pOt__gc_strs;



  pOt__Epilogue:;
  }
}
